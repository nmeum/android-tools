From 8027ec77633890c20b2cec0d35e732ac83a48365 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C4=90o=C3=A0n=20Tr=E1=BA=A7n=20C=C3=B4ng=20Danh?=
 <congdanhqx@gmail.com>
Date: Sun, 1 Nov 2020 15:51:35 +0700
Subject: [PATCH] adb: disable mDNS

---
 adb.cpp         | 15 ---------------
 client/main.cpp |  2 --
 socket_spec.cpp | 25 +------------------------
 3 files changed, 1 insertion(+), 41 deletions(-)

diff --git a/adb.cpp b/adb.cpp
index e829908a..23360304 100644
--- a/adb.cpp
+++ b/adb.cpp
@@ -1102,21 +1102,6 @@ void adb_set_reject_kill_server(bool value) {
 }
 
 static bool handle_mdns_request(std::string_view service, int reply_fd) {
-    if (!android::base::ConsumePrefix(&service, "mdns:")) {
-        return false;
-    }
-
-    if (service == "check") {
-        std::string check = mdns_check();
-        SendOkay(reply_fd, check);
-        return true;
-    }
-    if (service == "services") {
-        std::string services_list = mdns_list_discovered_services();
-        SendOkay(reply_fd, services_list);
-        return true;
-    }
-
     return false;
 }
 
diff --git a/client/main.cpp b/client/main.cpp
index c74a5cc5..b402f834 100644
--- a/client/main.cpp
+++ b/client/main.cpp
@@ -68,11 +68,9 @@ void adb_server_cleanup() {
     //   1. close_smartsockets, so that we don't get any new clients
     //   2. kick_all_transports, to avoid writing only part of a packet to a transport.
     //   3. usb_cleanup, to tear down the USB stack.
-    //   4. mdns_cleanup, to tear down mdns stack.
     close_smartsockets();
     kick_all_transports();
     usb_cleanup();
-    mdns_cleanup();
 }
 
 static void intentionally_leak() {
diff --git a/socket_spec.cpp b/socket_spec.cpp
index 91ebb360..3cf24e17 100644
--- a/socket_spec.cpp
+++ b/socket_spec.cpp
@@ -195,30 +195,7 @@ bool socket_spec_connect(unique_fd* fd, std::string_view address, int* port, std
         if (tcp_host_is_local(hostname)) {
             fd->reset(network_loopback_client(port_value, SOCK_STREAM, error));
         } else {
-#if ADB_HOST
-            // Check if the address is an mdns service we can connect to.
-            if (auto mdns_info = mdns_get_connect_service_info(std::string(address.substr(4)));
-                mdns_info != std::nullopt) {
-                fd->reset(network_connect(mdns_info->addr, mdns_info->port, SOCK_STREAM, 0, error));
-                if (fd->get() != -1) {
-                    // TODO(joshuaduong): We still show the ip address for the serial. Change it to
-                    // use the mdns instance name, so we can adjust to address changes on
-                    // reconnects.
-                    port_value = mdns_info->port;
-                    if (serial) {
-                        *serial = android::base::StringPrintf("%s.%s",
-                                                              mdns_info->service_name.c_str(),
-                                                              mdns_info->service_type.c_str());
-                    }
-                }
-            } else {
-                fd->reset(network_connect(hostname, port_value, SOCK_STREAM, 0, error));
-            }
-#else
-            // Disallow arbitrary connections in adbd.
-            *error = "adbd does not support arbitrary tcp connections";
-            return false;
-#endif
+            fd->reset(network_connect(hostname, port_value, SOCK_STREAM, 0, error));
         }
 
         if (fd->get() > 0) {
