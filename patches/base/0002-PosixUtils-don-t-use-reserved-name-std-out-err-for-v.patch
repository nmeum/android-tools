From f68ef5cc81b1823b9e47ee33d65b0130f9bcc192 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C4=90o=C3=A0n=20Tr=E1=BA=A7n=20C=C3=B4ng=20Danh?=
 <congdanhqx@gmail.com>
Date: Sun, 1 Nov 2020 08:30:09 +0700
Subject: [PATCH] PosixUtils: don't use reserved name std{out,err} for
 variables

musl's std{out,err} are macros.
---
 libs/androidfw/PosixUtils.cpp                 | 40 +++++++++----------
 libs/androidfw/include/androidfw/PosixUtils.h |  4 +-
 libs/androidfw/tests/PosixUtils_test.cpp      |  4 +-
 3 files changed, 24 insertions(+), 24 deletions(-)

diff --git a/libs/androidfw/PosixUtils.cpp b/libs/androidfw/PosixUtils.cpp
index 026912883a73..c01bfcd29eb8 100644
--- a/libs/androidfw/PosixUtils.cpp
+++ b/libs/androidfw/PosixUtils.cpp
@@ -50,17 +50,17 @@ namespace android {
 namespace util {

 std::unique_ptr<ProcResult> ExecuteBinary(const std::vector<std::string>& argv) {
-  int stdout[2];  // stdout[0] read, stdout[1] write
-  if (pipe(stdout) != 0) {
+  int fdout[2];  // fdout[0] read, fdout[1] write
+  if (pipe(fdout) != 0) {
     PLOG(ERROR) << "pipe";
     return nullptr;
   }

-  int stderr[2];  // stdout[0] read, stdout[1] write
-  if (pipe(stderr) != 0) {
+  int fderr[2];  // fderr[0] read, fderr[1] write
+  if (pipe(fderr) != 0) {
     PLOG(ERROR) << "pipe";
-    close(stdout[0]);
-    close(stdout[1]);
+    close(fdout[0]);
+    close(fdout[1]);
     return nullptr;
   }

@@ -89,12 +89,12 @@ std::unique_ptr<ProcResult> ExecuteBinary(const std::vector<std::string>& argv)
         exit(1);
       }
 
-      close(stdout[0]);
-      if (dup2(stdout[1], STDOUT_FILENO) == -1) {
+      close(fdout[0]);
+      if (dup2(fdout[1], STDOUT_FILENO) == -1) {
         abort();
       }
-      close(stderr[0]);
-      if (dup2(stderr[1], STDERR_FILENO) == -1) {
+      close(fderr[0]);
+      if (dup2(fderr[1], STDERR_FILENO) == -1) {
         abort();
       }
       execvp(argv0[0], const_cast<char* const*>(argv0));
@@ -102,23 +102,23 @@ std::unique_ptr<ProcResult> ExecuteBinary(const std::vector<std::string>& argv)
       abort();
     default: // parent
       free(argv0);
-      close(stdout[1]);
-      close(stderr[1]);
+      close(fdout[1]);
+      close(fderr[1]);
       int status;
       waitpid(pid, &status, 0);
       if (!WIFEXITED(status)) {
-          close(stdout[0]);
-          close(stderr[0]);
+          close(fdout[0]);
+          close(fderr[0]);
           return nullptr;
       }
       std::unique_ptr<ProcResult> result(new ProcResult());
       result->status = status;
-      const auto out = ReadFile(stdout[0]);
-      result->stdout_str = out ? *out : "";
-      close(stdout[0]);
-      const auto err = ReadFile(stderr[0]);
-      result->stderr_str = err ? *err : "";
-      close(stderr[0]);
+      const auto out = ReadFile(fdout[0]);
+      result->stdout_ = out ? *out : "";
+      close(fdout[0]);
+      const auto err = ReadFile(fderr[0]);
+      result->stderr_ = err ? *err : "";
+      close(fderr[0]);
       return result;
   }
 }
diff --git a/libs/androidfw/include/androidfw/PosixUtils.h b/libs/androidfw/include/androidfw/PosixUtils.h
index bb2084740a44..c6bb3fb42757 100644
--- a/libs/androidfw/include/androidfw/PosixUtils.h
+++ b/libs/androidfw/include/androidfw/PosixUtils.h
@@ -23,8 +23,8 @@ namespace util {
 
 struct ProcResult {
   int status;
-  std::string stdout_str;
-  std::string stderr_str;
+  std::string stdout_;
+  std::string stderr_;
 };
 
 // Fork, exec and wait for an external process. Return nullptr if the process could not be launched,
diff --git a/libs/androidfw/tests/PosixUtils_test.cpp b/libs/androidfw/tests/PosixUtils_test.cpp
index c7b3eba1451f..44816b279c1a 100644
--- a/libs/androidfw/tests/PosixUtils_test.cpp
+++ b/libs/androidfw/tests/PosixUtils_test.cpp
@@ -30,14 +30,14 @@ TEST(PosixUtilsTest, AbsolutePathToBinary) {
   const auto result = ExecuteBinary({"/bin/date", "--help"});
   ASSERT_THAT(result, NotNull());
   ASSERT_EQ(result->status, 0);
-  ASSERT_GE(result->stdout_str.find("usage: date "), 0);
+  ASSERT_GE(result->stdout_.find("usage: date "), 0);
 }
 
 TEST(PosixUtilsTest, RelativePathToBinary) {
   const auto result = ExecuteBinary({"date", "--help"});
   ASSERT_THAT(result, NotNull());
   ASSERT_EQ(result->status, 0);
-  ASSERT_GE(result->stdout_str.find("usage: date "), 0);
+  ASSERT_GE(result->stdout_.find("usage: date "), 0);
 }
 
 TEST(PosixUtilsTest, BadParameters) {
