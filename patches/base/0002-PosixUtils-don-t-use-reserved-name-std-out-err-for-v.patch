From f68ef5cc81b1823b9e47ee33d65b0130f9bcc192 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C4=90o=C3=A0n=20Tr=E1=BA=A7n=20C=C3=B4ng=20Danh?=
 <congdanhqx@gmail.com>
Date: Sun, 1 Nov 2020 08:30:09 +0700
Subject: [PATCH] PosixUtils: don't use reserved name std{out,err} for
 variables

musl's std{out,err} are macros.
---

diff --git a/libs/androidfw/PosixUtils.cpp b/libs/androidfw/PosixUtils.cpp
index 8ddc5724..8dd1cd68 100644
--- a/libs/androidfw/PosixUtils.cpp
+++ b/libs/androidfw/PosixUtils.cpp
@@ -46,17 +46,17 @@ namespace android {
 namespace util {
 
 ProcResult ExecuteBinary(const std::vector<std::string>& argv) {
-  int stdout[2];  // [0] read, [1] write
-  if (pipe(stdout) != 0) {
+  int fdout[2];  // [0] read, [1] write
+  if (pipe(fdout) != 0) {
     PLOG(ERROR) << "out pipe";
     return ProcResult{-1};
   }
 
-  int stderr[2];  // [0] read, [1] write
-  if (pipe(stderr) != 0) {
+  int fderr[2];  // [0] read, [1] write
+  if (pipe(fderr) != 0) {
     PLOG(ERROR) << "err pipe";
-    close(stdout[0]);
-    close(stdout[1]);
+    close(fdout[0]);
+    close(fdout[1]);
     return ProcResult{-1};
   }
 
@@ -73,10 +73,10 @@ ProcResult ExecuteBinary(const std::vector<std::string>& argv) {
   switch (pid) {
     case -1: // error
       free(argv0);
-      close(stdout[0]);
-      close(stdout[1]);
-      close(stderr[0]);
-      close(stderr[1]);
+      close(fdout[0]);
+      close(fdout[1]);
+      close(fderr[0]);
+      close(fderr[1]);
       PLOG(ERROR) << "fork";
       return ProcResult{-1};
     case 0: // child
@@ -90,12 +90,12 @@ ProcResult ExecuteBinary(const std::vector<std::string>& argv) {
         exit(1);
       }
 
-      close(stdout[0]);
-      if (dup2(stdout[1], STDOUT_FILENO) == -1) {
+      close(fdout[0]);
+      if (dup2(fdout[1], STDOUT_FILENO) == -1) {
         abort();
       }
-      close(stderr[0]);
-      if (dup2(stderr[1], STDERR_FILENO) == -1) {
+      close(fderr[0]);
+      if (dup2(fderr[1], STDERR_FILENO) == -1) {
         abort();
       }
       execvp(argv0[0], const_cast<char* const*>(argv0));
@@ -103,22 +103,22 @@ ProcResult ExecuteBinary(const std::vector<std::string>& argv) {
       abort();
     default: // parent
       free(argv0);
-      close(stdout[1]);
-      close(stderr[1]);
+      close(fdout[1]);
+      close(fderr[1]);
       int status;
       waitpid(pid, &status, 0);
       if (!WIFEXITED(status)) {
-          close(stdout[0]);
-          close(stderr[0]);
+          close(fdout[0]);
+          close(fderr[0]);
           return ProcResult{-1};
       }
       ProcResult result(status);
-      auto out = ReadFile(stdout[0]);
+      auto out = ReadFile(fdout[0]);
       result.stdout_str = out ? std::move(*out) : "";
-      close(stdout[0]);
-      auto err = ReadFile(stderr[0]);
+      close(fdout[0]);
+      auto err = ReadFile(fderr[0]);
       result.stderr_str = err ? std::move(*err) : "";
-      close(stderr[0]);
+      close(fderr[0]);
       return std::move(result);
   }
 }
